ylab("")
h2 <- ggplot(data = SP.noNA, aes(x = Math)) +
geom_histogram(bins = 10, colour = 1, fill = "white") +
xlab("Math Exam Scores") + geom_density()
b2 <- ggplot(SP.noNA, aes(x=Math, y="")) +
geom_boxplot() +
xlab("Math Exam Scores") +
ylab("")
ggarrange(ncol = 2, nrow = 2, h1, h2, b1, b2)
ggpairs(SP.noNA, columns = 6:8)
ggpairs(SP.noNA, columns = 6:8, aes(color = Lunch))
View(SP)
View(SP.noNA)
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
(lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math))
View(lm.out1)
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
summary(lm.out1)
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
plot(SP.noNA$Writing, SP.noNA$Math, main="Scatterplot with Regression Line", xlab="Writing Scores Label", ylab="Math Label")
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
abline(lm.out1, col="red")
summary(lm.out1)
(SP.noNA$coeffeicent)
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
plot(SP.noNA$Writing, SP.noNA$Math, main="Regression Line", xlab="Writing Scores", ylab="Math")
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
(abline(lm.out1, col="red"))
summary(lm.out1)
equation <- as.character(summary(lm.out1)$coefficients[1, 1])  # Intercept
slope <- as.character(summary(lm.out1)$coefficients[2, 1])     # Slope
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
plot(SP.noNA$Writing, SP.noNA$Math, main="Regression Line", xlab="Writing Scores", ylab="Math")
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
(abline(lm.out1, col="red"))
summary(lm.out1)
equation <- as.character(summary(lm.out1)$coefficients[1, 1])  # Intercept
slope <- as.character(summary(lm.out1)$coefficients[2, 1])     # Slope
slope
equation
S1 <- ggplot(SP.noNA, aes(x=Math, y=Writing)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = 13.42, slope = .82 ,
color = "blue", size = 1) +
xlab("Math Exam Score") + ylab("Writing Exam Score")
S1
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
plot(SP.noNA$Writing, SP.noNA$Math, main="Regression Line", xlab="Writing Scores", ylab="Math")
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
(abline(lm.out1, col="red"))
model_summary <-summary(lm.out1)
r_squared <- model_summary$r.squared
####
# Make sure to use the object SP.noNA
# and name the regression lm.out1
# so the code we provide in problems
# 4a, 4b and 5b runs.
####
plot(SP.noNA$Writing, SP.noNA$Math, main="Regression Line", xlab="Writing Scores", ylab="Math")
lm.out1 <- lm(SP.noNA$Writing ~ SP.noNA$Math)
(abline(lm.out1, col="red"))
model_summary <-summary(lm.out1)
model_summary
r_squared <- model_summary$r.squared
predicted_value = 13.42 + .82.5
predicted_value <- 13.42 + .82.5
predicted_value <- 13.42 + .82.5 * 75
b0 <- 13.42
b1 <- .82
observed_value = (b0 + b1 * 75) - 13.77
b0 <- 13.42
b1 <- .82
(observed_value = (b0 + b1 * 75) - 13.77)
# Create histogram of the residuals
rp2 <-ggplot(lm.out1, aes(x = residuals(lm.out1))) +
geom_histogram(bins = 15, color = "blue", fill = "gray") +
xlab("Model Residuals")
# creat normal QQ plot
rp3 <- ggplot(lm.out1, mapping = aes(sample = residuals(lm.out1))) +
stat_qq_band() + stat_qq_point() + stat_qq_line() +
xlab("Theoretical Quantiles") + ylab("Sample Quantiles")
ggarrange(ncol = 2, nrow = 1, rp2, rp3)
# Create residual plot
ggplot(lm.out1, aes(x = fitted(lm.out1),
y = residuals(lm.out1))) +
geom_point() +
geom_hline(yintercept = 0,color = "darkgray") +
xlab("Regression Fitted Values") + ylab("Model Residuals")
ggplot(SP.noNA, aes(x=Math, y=Writing, color = Lunch)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", size = 1) +
geom_abline(intercept = (lm.out2$coef[1]+lm.out2$coef[3]),
slope = lm.out2$coef[2],
color = "cyan2", linetype = "dashed", size = 1) +
geom_abline(intercept = lm.out2$coef[1], slope = lm.out2$coef[2],
color = "salmon", linetype = "dashed", size = 1) +
xlab("Math Exam Score") + ylab("Writing Exam Score")
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
slope <- model_summary$coefficients["X", "Estimate"]
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
slope <- lm.out1$coefficients["X", "Estimate"]
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
model_summary <- summary(lm.out1)
slope <- model_summary$coefficients["X", "Estimate"]
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
model_summary <- summary(lm.out1)
slope <- model_summary$coefficients
# Run the new regression and print the summary
lm.out2 <- lm(Writing ~ Math + Lunch, data = SP.noNA)
summary(lm.out2)
#
# The summary gives an intercept of 13.50,
# which is the estimated intercept
# for a fitted line for students who
# qualified for free/reduced lunch. Combine
# this with the slope to get the regression
# line for students who qualified for
# free/reduced lunch.
# The coefficient for Lunchstandard, 0.69,
# is the difference in the intercept between
# the students who qualified for free/reduced
# lunch and those who did not (standard).
# To get the intercept for students who did
# not qualify for free/reduced lunch, add
# Lunchstandard to Intercept. Then combine
# with the slope to get the equation for
# the standard lunch line.
model_summary <- summary(lm.out1)
slope <- model_summary$coefficients
slope
View(slope)
ggplot(SP.noNA, aes(x=Math, y=Writing, color = Lunch)) +
geom_point(size=2, shape=23) +
geom_abline(intercept = lm.out1$coef[1], slope = lm.out1$coef[2],
color = "blue", size = 1) +
geom_abline(intercept = (lm.out2$coef[1]+lm.out2$coef[3]),
slope = lm.out2$coef[2],
color = "cyan2", linetype = "dashed", size = 1) +
geom_abline(intercept = lm.out2$coef[1], slope = lm.out2$coef[2],
color = "salmon", linetype = "dashed", size = 1) +
xlab("Math Exam Score") + ylab("Writing Exam Score")
library(knitr)
library(tidyverse)
library(BSDA)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
library(knitr)
library(tidyverse)
library(BSDA)
Iris.df <- read_csv("Iris.csv")
Iris.df$Species <- as.factor(Iris.df$Species)
#
DH.df <- read_csv("DietAndHealthStudy.csv")
DH.df$Diet <- as.factor(DH.df$Diet)
DH.df$HOutcome <- as.factor(DH.df$HOutcome)
#
C.df <- read_csv("Cholesterol.csv")
C.df$Cereal <- as.factor(C.df$Cereal)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
# Check using t.test
View(Iris.Vir)
View(Iris.Ver)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
# Check using t.test
t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width, paired = TRUE)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
# Check using t.test
q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width, paired = TRUE)
View(q2_tResult)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
# Check using t.test
q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
# Check using t.test
q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width)
q2_tResult2 <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width, paired = TRUE)
View(q2_tResult2)
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Vir$Sepal.Width)
n_viriginica <- length(Iris.Ver$Sepal.Width)
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Ver$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Vir$Sepal.Width)
n_viriginica <- length(Iris.Ver$Sepal.Width)
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Ver$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Vir$Sepal.Width)
n_viriginica <- length(Iris.Ver$Sepal.Width)
t_numerator <- x_bar_vir - x_bar_ver
t_denominator <- sd_virginica/ sqrt(n_viriginica)
t_value = t_numerator/t_denominator
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Vir$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Vir$Sepal.Width)
n_viriginica <- length(Iris.Ver$Sepal.Width)
t_numerator <- x_bar_vir - x_bar_ver
t_denominator <- sd_virginica/ sqrt(n_viriginica)
t_value = t_numerator/t_denominator
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Vir$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Vir$Sepal.Width)
n_viriginica <- length(Iris.Vir$Sepal.Width)
t_numerator <- x_bar_vir - x_bar_ver
t_denominator <- sd_virginica/ sqrt(n_viriginica)
t_value = t_numerator/t_denominator
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Vir$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Vir$Sepal.Width)
n_viriginica <- length(Iris.Vir$Sepal.Width)
t_numerator <- x_bar_vir - x_bar_ver
t_denominator <- sd_virginica/ sqrt(n_viriginica)
t_value = t_numerator/t_denominator
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Vir$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Ver$Sepal.Width)
n_viriginica <- length(Iris.Vir$Sepal.Width)
t_numerator <- x_bar_vir - x_bar_ver
t_denominator <- sd_virginica/ sqrt(n_viriginica)
t_value = t_numerator/t_denominator
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
# Create subsets for the two species
Iris.Vir <- Iris.df %>% filter(Species == "virginica")
Iris.Ver <- Iris.df %>% filter(Species == "versicolor")
# add HT steps as if doing by-hand
x_bar_vir <- mean(Iris.Vir$Sepal.Width)
x_bar_ver <- mean(Iris.Ver$Sepal.Width)
sd_virginica <- sd(Iris.Ver$Sepal.Width)
n_viriginica <- length(Iris.Vir$Sepal.Width)
t_numerator <- x_bar_vir - x_bar_ver
t_denominator <- sd_virginica/ sqrt(n_viriginica)
t_value = t_numerator/t_denominator
degree_f <- n_viriginica -1
p_value <- 2 * pnorm(t_value, 0, 1)
# Check using t.test
(q2_tResult <-t.test(Iris.Vir$Sepal.Width, Iris.Ver$Sepal.Width))
Y
install.packages(c("bslib", "cpp11", "dbplyr", "dplyr", "evaluate", "GGally", "haven", "htmltools", "knitr", "lifecycle", "lme4", "Matrix", "MatrixModels", "pracma", "RcppEigen", "rlang", "robustbase", "rprojroot", "scales", "stringi", "stringr", "testthat", "tinytex", "utf8", "vctrs", "waldo", "withr", "xfun", "xml2"))
library(sf)
# Thinking of creating a summary page that shows the overall inspection
# Create data table from assets
geojson_file <- "Cleaned_Restaurant_Inspections.geojson"
sf_data <- st_read(geojson_file)
setwd("~/UW/GEOG_328/mapping_seattle/assets")
library(sf)
# Thinking of creating a summary page that shows the overall inspection
# Create data table from assets
geojson_file <- "Cleaned_Restaurant_Inspections.geojson"
sf_data <- st_read(geojson_file)
str(sf_data)
#Max Score Inspection, 98
sd_data$SCORE_INSPECTION <- as.numeric(sd_data$SCORE_INSPECTION)
library(sf)
# Thinking of creating a summary page that shows the overall inspection
# Create data table from assets
geojson_file <- "Cleaned_Restaurant_Inspections.geojson"
sf_data <- st_read(geojson_file)
str(sf_data)
#Max Score Inspection, 98
sd_data$SCORE_INSPECTION <- as.numeric(sd_data$SCORE_INSPECTION)
View(sf_data)
library(sf)
# Thinking of creating a summary page that shows the overall inspection
# Create data table from assets
geojson_file <- "Cleaned_Restaurant_Inspections.geojson"
sf_data <- st_read(geojson_file)
str(sf_data)
#Max Score Inspection, 98
sf_data$SCORE_INSPECTION <- as.numeric(sd_data$SCORE_INSPECTION)
library(sf)
# Thinking of creating a summary page that shows the overall inspection
# Create data table from assets
geojson_file <- "Cleaned_Restaurant_Inspections.geojson"
sf_data <- st_read(geojson_file)
str(sf_data)
#Max Score Inspection, 98
sf_data$SCORE_INSPECTION <- as.numeric(sf_data$SCORE_INSPECTION)
max_score_insp <- max(sf_data$SCORE_INSPECTION, na.rm = TRUE)
#Max Violation Points, 25
sf_data$VIOLATIONPOINTS <- as.numeric(sf_data$VIOLATIONPOINTS)
max_violation_points <- max(sf_data$VIOLATIONPOINTS, na.rm = TRUE)
#Amount of Risks
risk <- table(sf_data$RISK)
count_rI <- risk_I["I"]         #608
library(sf)
# Thinking of creating a summary page that shows the overall inspection
# Create data table from assets
geojson_file <- "Cleaned_Restaurant_Inspections.geojson"
sf_data <- st_read(geojson_file)
str(sf_data)
#Max Score Inspection, 98
sf_data$SCORE_INSPECTION <- as.numeric(sf_data$SCORE_INSPECTION)
max_score_insp <- max(sf_data$SCORE_INSPECTION, na.rm = TRUE)
#Max Violation Points, 25
sf_data$VIOLATIONPOINTS <- as.numeric(sf_data$VIOLATIONPOINTS)
max_violation_points <- max(sf_data$VIOLATIONPOINTS, na.rm = TRUE)
